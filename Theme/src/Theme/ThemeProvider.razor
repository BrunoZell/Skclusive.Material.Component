@namespace Skclusive.Material.Theme
@inject IThemeService ThemeService

<CascadingValue
    Value="@ThemeContext">
    <SingleRender>
        <ThemeRenderer
            Default="@Default"
            Light="@Light"
            Dark="@Dark" />
        <Head
            Disable="@(!Head)"
            Context="HeadContext">
            <InjectedStyles
                RootRef="@HeadContext.RefBack" />
        </Head>
        @ChildContent
        <InjectedScripts />
    </SingleRender>
</CascadingValue>

@code
{
    [Parameter]
    public bool Head { set; get; } = false;

    [Parameter]
    public RenderFragment ChildContent { set; get; }

    [Parameter]
    public ThemeValue Light { set; get; }

    [Parameter]
    public ThemeValue Dark { set; get; }

    [Parameter]
    public ThemeValue Default { set; get; }

    protected IThemeContext ThemeContext => new ThemeContext(ThemeService.Current);

    protected override void OnInitialized()
    {
        ThemeService.OnChange += OnThemeChange;
    }

    protected void OnThemeChange(object sender, Theme current)
    {
        _ = InvokeAsync(StateHasChanged);
    }

    protected void Dispose()
    {
        ThemeService.OnChange -= OnThemeChange;
    }
}